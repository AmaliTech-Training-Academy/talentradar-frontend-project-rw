# TalentRadar Frontend CI Pipeline
# This workflow runs quality checks on the frontend application
# Triggers on all PRs and pushes to ensure code quality

name: Frontend CI

on:
  push:
    branches: [development, staging, production]
    paths:
      - 'talentradar-frontend-project-rw/**'
      - '.github/workflows/ci.yml'
  pull_request:
    branches: [development, staging, production]
    paths:
      - 'talentradar-frontend-project-rw/**'
      - '.github/workflows/ci.yml'

env:
  NODE_VERSION: '18'

jobs:
  quality-checks:
    name: Code Quality & Build Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: pnpm-lock.yaml

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run ESLint
        run: |
          echo "üîç Running ESLint..."
          pnpm lint

      - name: Build application
        run: |
          echo "üî® Building Next.js application..."
          pnpm build

  docker-test:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: quality-checks

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Test Docker build
        run: |
          echo "üê≥ Testing Docker build..."
          docker build -f Dockerfile . -t test-frontend:latest
          echo "‚úÖ Docker build successful"

  status-check:
    name: All Checks Status
    runs-on: ubuntu-latest
    needs: [quality-checks, docker-test]
    if: always()

    steps:
      - name: Check all jobs status
        run: |
          if [[ "${{ needs.quality-checks.result }}" == "success" && "${{ needs.docker-test.result }}" == "success" ]]; then
            echo "‚úÖ All quality checks passed!"
            exit 0
          else
            echo "‚ùå Some quality checks failed"
            echo "Quality checks: ${{ needs.quality-checks.result }}"
            echo "Docker test: ${{ needs.docker-test.result }}"
            exit 1
          fi

