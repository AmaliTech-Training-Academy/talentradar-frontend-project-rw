# TalentRadar Frontend Deployment Pipeline
# This workflow builds and deploys the frontend application to AWS ECS
# Infrastructure is managed by Terraform in the terraformm/ directory
#
# Triggers:
# - On merge to development branch
# - Uses existing Terraform-managed ECS cluster and ECR repository
#
# Prerequisites:
# 1. AWS credentials stored in GitHub secrets: AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY
# 2. Terraform infrastructure deployed (terraformm/ directory)
# 3. ECR repository: talentradar/frontend
# 4. ECS cluster: TalentRadar-Cluster
# 5. ECS service: TalentRadar-frontend

name: Deploy TalentRadar Frontend to AWS ECS

on:
  push:
    branches: [ "development" ]
  pull_request:
    branches: [ "development" ]
    types: [ "closed" ]

env:
  # AWS Configuration - matches Terraform infrastructure
  AWS_REGION: eu-west-1
  AWS_ACCOUNT_ID: 323135480621  # From Terraform state
  
  # ECR Repository - managed by Terraform
  ECR_REPOSITORY: talentradar/frontend
  
  # ECS Configuration - matches Terraform outputs  
  ECS_CLUSTER: TalentRadar-Cluster
  ECS_SERVICE: TalentRadar-frontend
  CONTAINER_NAME: frontend
  
  # Build Configuration
  DOCKERFILE_PATH: ./Dockerfile
  BUILD_CONTEXT: .

permissions:
  contents: read
  pull-requests: read

jobs:
  # Only run on merged PRs or direct pushes to development
  check-trigger:
    name: Check Deployment Trigger
    runs-on: ubuntu-latest
    outputs:
      should-deploy: ${{ steps.check.outputs.should-deploy }}
    steps:
      - name: Check if deployment should proceed
        id: check
        run: |
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/development" ]]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Direct push to development - will deploy"
          elif [[ "${{ github.event_name }}" == "pull_request" && "${{ github.event.pull_request.merged }}" == "true" ]]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Merged PR to development - will deploy"
          else
            echo "should-deploy=false" >> $GITHUB_OUTPUT
            echo "‚ùå Not a merge or push to development - skipping deployment"
          fi

  deploy:
    name: Build and Deploy Frontend
    runs-on: ubuntu-latest
    needs: check-trigger
    if: needs.check-trigger.outputs.should-deploy == 'true'
    environment: production

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for better caching

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Extract metadata for Docker
      id: meta
      run: |
        # Generate timestamp-based tag
        TIMESTAMP=$(date +%Y%m%d-%H%M%S)
        SHORT_SHA=${GITHUB_SHA::8}
        
        echo "timestamp=${TIMESTAMP}" >> $GITHUB_OUTPUT
        echo "short-sha=${SHORT_SHA}" >> $GITHUB_OUTPUT
        echo "image-tag=${TIMESTAMP}-${SHORT_SHA}" >> $GITHUB_OUTPUT

    - name: Build, tag, and push Docker image to ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ steps.meta.outputs.image-tag }}
      run: |
        echo "üî® Building Docker image..."
        echo "Context: ${{ env.BUILD_CONTEXT }}"
        echo "Dockerfile: ${{ env.DOCKERFILE_PATH }}"
        
        # Build the Docker image
        docker build \
          -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
          -t $ECR_REGISTRY/$ECR_REPOSITORY:latest \
          -f ${{ env.DOCKERFILE_PATH }} \
          ${{ env.BUILD_CONTEXT }}
        
        echo "üì§ Pushing image to ECR..."
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
        echo "‚úÖ Image pushed successfully: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    - name: Get current ECS task definition
      id: get-task-def
      run: |
        echo "üìã Retrieving current task definition..."
        aws ecs describe-task-definition \
          --task-definition TalentRadar-frontend \
          --query 'taskDefinition' \
          --output json > task-definition.json
        
        echo "‚úÖ Current task definition retrieved"

    - name: Update task definition with new image
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy updated task definition to ECS
      id: deploy
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true

    - name: Cleanup old task definitions
      run: |
        echo "üßπ Cleaning up old task definitions..."
        
        # Get all task definition ARNs for this family
        FAMILY="TalentRadar-frontend"
        TASK_ARNS=$(aws ecs list-task-definitions \
          --family-prefix $FAMILY \
          --status ACTIVE \
          --query 'taskDefinitionArns' \
          --output text)
        
        # Keep only the 5 most recent task definitions
        SORTED_ARNS=($(echo $TASK_ARNS | tr ' ' '\n' | sort -V))
        TOTAL=${#SORTED_ARNS[@]}
        
        if [ $TOTAL -gt 5 ]; then
          KEEP=5
          DELETE_COUNT=$((TOTAL - KEEP))
          
          echo "Found $TOTAL task definitions, keeping $KEEP, deleting $DELETE_COUNT"
          
          for (( i=0; i<$DELETE_COUNT; i++ )); do
            ARN=${SORTED_ARNS[$i]}
            echo "Deregistering old task definition: $ARN"
            aws ecs deregister-task-definition --task-definition $ARN >/dev/null
          done
        else
          echo "Only $TOTAL task definitions found, no cleanup needed"
        fi

    - name: Deployment summary
      run: |
        echo "üéâ Deployment completed successfully!"
        echo "üì¶ Image: ${{ steps.build-image.outputs.image }}"
        echo "üöÄ Service: ${{ env.ECS_SERVICE }}"
        echo "üåê Cluster: ${{ env.ECS_CLUSTER }}"
        echo "‚è∞ Deployed at: $(date)"
        
        # Get service status
        SERVICE_STATUS=$(aws ecs describe-services \
          --cluster ${{ env.ECS_CLUSTER }} \
          --services ${{ env.ECS_SERVICE }} \
          --query 'services[0].status' \
          --output text)
        
        echo "üìä Service Status: $SERVICE_STATUS"